/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main/ts/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@stomp/stompjs/bundles/stomp.umd.js":
/*!**********************************************************!*\
  !*** ./node_modules/@stomp/stompjs/bundles/stomp.umd.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./src/byte.ts\":\n/*!*********************!*\\\n  !*** ./src/byte.ts ***!\n  \\*********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexports.BYTE = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00'\n};\n\n\n/***/ }),\n\n/***/ \"./src/client.ts\":\n/*!***********************!*\\\n  !*** ./src/client.ts ***!\n  \\***********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar stomp_handler_1 = __webpack_require__(/*! ./stomp-handler */ \"./src/stomp-handler.ts\");\nvar versions_1 = __webpack_require__(/*! ./versions */ \"./src/versions.ts\");\nvar web_socket_state_1 = __webpack_require__(/*! ./web-socket-state */ \"./src/web-socket-state.ts\");\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nvar Client = /** @class */ (function () {\n    /**\n     * Create an instance.\n     */\n    function Client(conf) {\n        if (conf === void 0) { conf = {}; }\n        /**\n         * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n         *\n         * Example:\n         * ```javascript\n         *        // Try only versions 1.0 and 1.1\n         *        client.stompVersions = new Versions(['1.0', '1.1'])\n         * ```\n         */\n        this.stompVersions = versions_1.Versions.default;\n        /**\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * This switches on a non standard behavior while sending WebSocket packets.\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n         * Only Java Spring brokers seems to use this mode.\n         *\n         * WebSockets, by itself, split large (text) packets,\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\n         * Actually setting it for such broker will cause large messages to fail.\n         *\n         * `false` by default.\n         *\n         * Binary frames are never split.\n         */\n        this.splitLargeFrames = false;\n        /**\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Usually the\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n         * is automatically decided by type of the payload.\n         * Default is `false`, which should work with all compliant brokers.\n         *\n         * Set this flag to force binary frames.\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * A bug in ReactNative chops a string on occurrence of a NULL.\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n         * This makes incoming WebSocket messages invalid STOMP packets.\n         * Setting this flag attempts to reverse the damage by appending a NULL.\n         * If the broker splits a large message into multiple WebSocket messages,\n         * this flag will cause data loss and abnormal termination of connection.\n         *\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n         */\n        this.appendMissingNULLonIncoming = false;\n        this._active = false;\n        // Dummy callbacks\n        var noOp = function () { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    Object.defineProperty(Client.prototype, \"webSocket\", {\n        /**\n         * Underlying WebSocket instance, READONLY.\n         */\n        get: function () {\n            return this._webSocket;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Client.prototype, \"disconnectHeaders\", {\n        /**\n         * Disconnection headers.\n         */\n        get: function () {\n            return this._disconnectHeaders;\n        },\n        set: function (value) {\n            this._disconnectHeaders = value;\n            if (this._stompHandler) {\n                this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Client.prototype, \"connected\", {\n        /**\n         * `true` if there is a active connection with STOMP Broker\n         */\n        get: function () {\n            return (!!this._stompHandler) && this._stompHandler.connected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Client.prototype, \"connectedVersion\", {\n        /**\n         * version of STOMP protocol negotiated with the server, READONLY\n         */\n        get: function () {\n            return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Client.prototype, \"active\", {\n        /**\n         * if the client is active (connected or going to reconnect)\n         */\n        get: function () {\n            return this._active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Update configuration.\n     */\n    Client.prototype.configure = function (conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    };\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    Client.prototype.activate = function () {\n        this._active = true;\n        this._connect();\n    };\n    Client.prototype._connect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.connected) {\n                            this.debug('STOMP: already connected, nothing to do');\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, this.beforeConnect()];\n                    case 1:\n                        _a.sent();\n                        if (!this._active) {\n                            this.debug('Client has been marked inactive, will not attempt to connect');\n                            return [2 /*return*/];\n                        }\n                        this.debug('Opening Web Socket...');\n                        // Get the actual WebSocket (or a similar object)\n                        this._webSocket = this._createWebSocket();\n                        this._stompHandler = new stomp_handler_1.StompHandler(this, this._webSocket, {\n                            debug: this.debug,\n                            stompVersions: this.stompVersions,\n                            connectHeaders: this.connectHeaders,\n                            disconnectHeaders: this._disconnectHeaders,\n                            heartbeatIncoming: this.heartbeatIncoming,\n                            heartbeatOutgoing: this.heartbeatOutgoing,\n                            splitLargeFrames: this.splitLargeFrames,\n                            maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n                            forceBinaryWSFrames: this.forceBinaryWSFrames,\n                            logRawCommunication: this.logRawCommunication,\n                            appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n                            onConnect: function (frame) {\n                                if (!_this._active) {\n                                    _this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                                    _this._disposeStompHandler();\n                                    return;\n                                }\n                                _this.onConnect(frame);\n                            },\n                            onDisconnect: function (frame) {\n                                _this.onDisconnect(frame);\n                            },\n                            onStompError: function (frame) {\n                                _this.onStompError(frame);\n                            },\n                            onWebSocketClose: function (evt) {\n                                _this.onWebSocketClose(evt);\n                                // The callback is called before attempting to reconnect, this would allow the client\n                                // to be `deactivated` in the callback.\n                                if (_this._active) {\n                                    _this._schedule_reconnect();\n                                }\n                            },\n                            onWebSocketError: function (evt) {\n                                _this.onWebSocketError(evt);\n                            },\n                            onUnhandledMessage: function (message) {\n                                _this.onUnhandledMessage(message);\n                            },\n                            onUnhandledReceipt: function (frame) {\n                                _this.onUnhandledReceipt(frame);\n                            },\n                            onUnhandledFrame: function (frame) {\n                                _this.onUnhandledFrame(frame);\n                            }\n                        });\n                        this._stompHandler.start();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Client.prototype._createWebSocket = function () {\n        var webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    };\n    Client.prototype._schedule_reconnect = function () {\n        var _this = this;\n        if (this.reconnectDelay > 0) {\n            this.debug(\"STOMP: scheduling reconnection in \" + this.reconnectDelay + \"ms\");\n            this._reconnector = setTimeout(function () {\n                _this._connect();\n            }, this.reconnectDelay);\n        }\n    };\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n     *\n     * To reactivate you can call [Client#activate]{@link Client#activate}.\n     */\n    Client.prototype.deactivate = function () {\n        // indicate that auto reconnect loop should terminate\n        this._active = false;\n        // Clear if a reconnection was scheduled\n        if (this._reconnector) {\n            clearTimeout(this._reconnector);\n        }\n        this._disposeStompHandler();\n    };\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different than a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    Client.prototype.forceDisconnect = function () {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === web_socket_state_1.WebSocketState.CONNECTING\n                || this._webSocket.readyState === web_socket_state_1.WebSocketState.OPEN) {\n                this._stompHandler._closeWebsocket();\n            }\n        }\n    };\n    Client.prototype._disposeStompHandler = function () {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n            this._stompHandler = null;\n        }\n    };\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body use binaryBody parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n     * and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    Client.prototype.publish = function (params) {\n        this._stompHandler.publish(params);\n    };\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n     * random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based in the value of the receipt-id.\n     *\n     * This method allow watching for a receipt and invoke the callback\n     * when corresponding receipt has been received.\n     *\n     * The actual {@link FrameImpl} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    Client.prototype.watchForReceipt = function (receiptId, callback) {\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    };\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each received message with\n     * the {@link IMessage} as argument.\n     *\n     * Note: The library will generate an unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the headers argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    Client.prototype.subscribe = function (destination, callback, headers) {\n        if (headers === void 0) { headers = {}; }\n        return this._stompHandler.subscribe(destination, callback, headers);\n    };\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    Client.prototype.unsubscribe = function (id, headers) {\n        if (headers === void 0) { headers = {}; }\n        this._stompHandler.unsubscribe(id, headers);\n    };\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    Client.prototype.begin = function (transactionId) {\n        return this._stompHandler.begin(transactionId);\n    };\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    Client.prototype.commit = function (transactionId) {\n        this._stompHandler.commit(transactionId);\n    };\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    Client.prototype.abort = function (transactionId) {\n        this._stompHandler.abort(transactionId);\n    };\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    Client.prototype.ack = function (messageId, subscriptionId, headers) {\n        if (headers === void 0) { headers = {}; }\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    };\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    Client.prototype.nack = function (messageId, subscriptionId, headers) {\n        if (headers === void 0) { headers = {}; }\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    };\n    return Client;\n}());\nexports.Client = Client;\n\n\n/***/ }),\n\n/***/ \"./src/compatibility/compat-client.ts\":\n/*!********************************************!*\\\n  !*** ./src/compatibility/compat-client.ts ***!\n  \\********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar client_1 = __webpack_require__(/*! ../client */ \"./src/client.ts\");\nvar heartbeat_info_1 = __webpack_require__(/*! ./heartbeat-info */ \"./src/compatibility/heartbeat-info.ts\");\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n *\n * Part of `@stomp/stompjs`.\n *\n * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n */\nvar CompatClient = /** @class */ (function (_super) {\n    __extends(CompatClient, _super);\n    /**\n     * Available for backward compatibility, please shift to using {@link Client}\n     * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n     *\n     * **Deprecated**\n     *\n     * @internal\n     */\n    function CompatClient(webSocketFactory) {\n        var _this = _super.call(this) || this;\n        /**\n         * It is no op now. No longer needed. Large packets work out of the box.\n         */\n        _this.maxWebSocketFrameSize = 16 * 1024;\n        _this._heartbeatInfo = new heartbeat_info_1.HeartbeatInfo(_this);\n        _this.reconnect_delay = 0;\n        _this.webSocketFactory = webSocketFactory;\n        // Default from previous version\n        _this.debug = function () {\n            var message = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                message[_i] = arguments[_i];\n            }\n            console.log.apply(console, message);\n        };\n        return _this;\n    }\n    CompatClient.prototype._parseConnect = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var closeEventCallback;\n        var connectCallback;\n        var errorCallback;\n        var headers = {};\n        if (args.length < 2) {\n            throw new Error(('Connect requires at least 2 arguments'));\n        }\n        if (typeof (args[1]) === 'function') {\n            headers = args[0], connectCallback = args[1], errorCallback = args[2], closeEventCallback = args[3];\n        }\n        else {\n            switch (args.length) {\n                case 6:\n                    headers.login = args[0], headers.passcode = args[1], connectCallback = args[2], errorCallback = args[3], closeEventCallback = args[4], headers.host = args[5];\n                    break;\n                default:\n                    headers.login = args[0], headers.passcode = args[1], connectCallback = args[2], errorCallback = args[3], closeEventCallback = args[4];\n            }\n        }\n        return [headers, connectCallback, errorCallback, closeEventCallback];\n    };\n    /**\n     * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n     *\n     * **Deprecated**\n     *\n     * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n     * version with headers to pass your broker specific options.\n     *\n     * overloads:\n     * - connect(headers, connectCallback)\n     * - connect(headers, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback)\n     * - connect(login, passcode, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n     *\n     * params:\n     * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n     * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n     * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n     * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n     * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    CompatClient.prototype.connect = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var out = this._parseConnect.apply(this, args);\n        if (out[0]) {\n            this.connectHeaders = out[0];\n        }\n        if (out[1]) {\n            this.onConnect = out[1];\n        }\n        if (out[2]) {\n            this.onStompError = out[2];\n        }\n        if (out[3]) {\n            this.onWebSocketClose = out[3];\n        }\n        _super.prototype.activate.call(this);\n    };\n    /**\n     * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n     *\n     * **Deprecated**\n     *\n     * See:\n     * [Client#onDisconnect]{@link Client#onDisconnect}, and\n     * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    CompatClient.prototype.disconnect = function (disconnectCallback, headers) {\n        if (headers === void 0) { headers = {}; }\n        if (disconnectCallback) {\n            this.onDisconnect = disconnectCallback;\n        }\n        this.disconnectHeaders = headers;\n        _super.prototype.deactivate.call(this);\n    };\n    /**\n     * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n     *\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations. The headers will, typically, be available to the subscriber.\n     * However, there may be special purpose headers corresponding to your STOMP broker.\n     *\n     *  **Deprecated**, use [Client#publish]{@link Client#publish}\n     *\n     * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n     *\n     * ```javascript\n     *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n     *\n     *        // If you want to send a message with a body, you must also pass the headers argument.\n     *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n     * ```\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    CompatClient.prototype.send = function (destination, headers, body) {\n        if (headers === void 0) { headers = {}; }\n        if (body === void 0) { body = ''; }\n        headers = Object.assign({}, headers);\n        var skipContentLengthHeader = (headers['content-length'] === false);\n        if (skipContentLengthHeader) {\n            delete headers['content-length'];\n        }\n        this.publish({\n            destination: destination,\n            headers: headers,\n            body: body,\n            skipContentLengthHeader: skipContentLengthHeader\n        });\n    };\n    Object.defineProperty(CompatClient.prototype, \"reconnect_delay\", {\n        /**\n         * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n         *\n         * **Deprecated**\n         */\n        set: function (value) {\n            this.reconnectDelay = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompatClient.prototype, \"ws\", {\n        /**\n         * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n         *\n         * **Deprecated**\n         */\n        get: function () {\n            return this._webSocket;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompatClient.prototype, \"version\", {\n        /**\n         * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n         *\n         * **Deprecated**\n         */\n        get: function () {\n            return this.connectedVersion;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompatClient.prototype, \"onreceive\", {\n        /**\n         * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n         *\n         * **Deprecated**\n         */\n        get: function () {\n            return this.onUnhandledMessage;\n        },\n        /**\n         * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n         *\n         * **Deprecated**\n         */\n        set: function (value) {\n            this.onUnhandledMessage = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompatClient.prototype, \"onreceipt\", {\n        /**\n         * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n         * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n         *\n         * **Deprecated**\n         */\n        get: function () {\n            return this.onUnhandledReceipt;\n        },\n        /**\n         * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n         *\n         * **Deprecated**\n         */\n        set: function (value) {\n            this.onUnhandledReceipt = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompatClient.prototype, \"heartbeat\", {\n        /**\n         * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n         * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n         *\n         * **Deprecated**\n         */\n        get: function () {\n            return this._heartbeatInfo;\n        },\n        /**\n         * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n         * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n         *\n         * **Deprecated**\n         */\n        set: function (value) {\n            this.heartbeatIncoming = value.incoming;\n            this.heartbeatOutgoing = value.outgoing;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CompatClient;\n}(client_1.Client));\nexports.CompatClient = CompatClient;\n\n\n/***/ }),\n\n/***/ \"./src/compatibility/heartbeat-info.ts\":\n/*!*********************************************!*\\\n  !*** ./src/compatibility/heartbeat-info.ts ***!\n  \\*********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nvar HeartbeatInfo = /** @class */ (function () {\n    function HeartbeatInfo(client) {\n        this.client = client;\n    }\n    Object.defineProperty(HeartbeatInfo.prototype, \"outgoing\", {\n        get: function () {\n            return this.client.heartbeatOutgoing;\n        },\n        set: function (value) {\n            this.client.heartbeatOutgoing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HeartbeatInfo.prototype, \"incoming\", {\n        get: function () {\n            return this.client.heartbeatIncoming;\n        },\n        set: function (value) {\n            this.client.heartbeatIncoming = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return HeartbeatInfo;\n}());\nexports.HeartbeatInfo = HeartbeatInfo;\n\n\n/***/ }),\n\n/***/ \"./src/compatibility/stomp.ts\":\n/*!************************************!*\\\n  !*** ./src/compatibility/stomp.ts ***!\n  \\************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar versions_1 = __webpack_require__(/*! ../versions */ \"./src/versions.ts\");\nvar compat_client_1 = __webpack_require__(/*! ./compat-client */ \"./src/compatibility/compat-client.ts\");\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\nvar Stomp = /** @class */ (function () {\n    function Stomp() {\n    }\n    /**\n     * This method creates a WebSocket client that is connected to\n     * the STOMP server located at the url.\n     *\n     * ```javascript\n     *        var url = \"ws://localhost:61614/stomp\";\n     *        var client = Stomp.client(url);\n     * ```\n     *\n     * **Deprecated**\n     *\n     * It will be removed in next major version. Please switch to {@link Client}\n     * using [Client#brokerURL]{@link Client#brokerURL}.\n     */\n    Stomp.client = function (url, protocols) {\n        // This is a hack to allow another implementation than the standard\n        // HTML5 WebSocket class.\n        //\n        // It is possible to use another class by calling\n        //\n        //     Stomp.WebSocketClass = MozWebSocket\n        //\n        // *prior* to call `Stomp.client()`.\n        //\n        // This hack is deprecated and `Stomp.over()` method should be used\n        // instead.\n        // See remarks on the function Stomp.over\n        if (protocols == null) {\n            protocols = versions_1.Versions.default.protocolVersions();\n        }\n        var wsFn = function () {\n            var klass = Stomp.WebSocketClass || WebSocket;\n            return new klass(url, protocols);\n        };\n        return new compat_client_1.CompatClient(wsFn);\n    };\n    /**\n     * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n     * specify the WebSocket to use (either a standard HTML5 WebSocket or\n     * a similar object).\n     *\n     * In order to support reconnection, the function Client._connect should be callable more than once.\n     * While reconnecting\n     * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n     * alternatively allows passing a function that should return a new instance of the underlying socket.\n     *\n     * ```javascript\n     *        var client = Stomp.over(function(){\n     *          return new WebSocket('ws://localhost:15674/ws')\n     *        });\n     * ```\n     *\n     * **Deprecated**\n     *\n     * It will be removed in next major version. Please switch to {@link Client}\n     * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n     */\n    Stomp.over = function (ws) {\n        var wsFn;\n        if (typeof (ws) === 'function') {\n            wsFn = ws;\n        }\n        else {\n            console.warn('Stomp.over did not receive a factory, auto reconnect will not work. ' +\n                'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over');\n            wsFn = function () { return ws; };\n        }\n        return new compat_client_1.CompatClient(wsFn);\n    };\n    /**\n     * In case you need to use a non standard class for WebSocket.\n     *\n     * For example when using within NodeJS environment:\n     *\n     * ```javascript\n     *        StompJs = require('../../esm5/');\n     *        Stomp = StompJs.Stomp;\n     *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n     * ```\n     *\n     * **Deprecated**\n     *\n     *\n     * It will be removed in next major version. Please switch to {@link Client}\n     * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n     */\n    // tslint:disable-next-line:variable-name\n    Stomp.WebSocketClass = null;\n    return Stomp;\n}());\nexports.Stomp = Stomp;\n\n\n/***/ }),\n\n/***/ \"./src/frame-impl.ts\":\n/*!***************************!*\\\n  !*** ./src/frame-impl.ts ***!\n  \\***************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar byte_1 = __webpack_require__(/*! ./byte */ \"./src/byte.ts\");\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nvar FrameImpl = /** @class */ (function () {\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    function FrameImpl(params) {\n        var command = params.command, headers = params.headers, body = params.body, binaryBody = params.binaryBody, escapeHeaderValues = params.escapeHeaderValues, skipContentLengthHeader = params.skipContentLengthHeader;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    Object.defineProperty(FrameImpl.prototype, \"body\", {\n        /**\n         * body of the frame\n         */\n        get: function () {\n            if (!this._body && this.isBinaryBody) {\n                this._body = new TextDecoder().decode(this._binaryBody);\n            }\n            return this._body;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FrameImpl.prototype, \"binaryBody\", {\n        /**\n         * body as Uint8Array\n         */\n        get: function () {\n            if (!this._binaryBody && !this.isBinaryBody) {\n                this._binaryBody = new TextEncoder().encode(this._body);\n            }\n            return this._binaryBody;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    FrameImpl.fromRawFrame = function (rawFrame, escapeHeaderValues) {\n        var headers = {};\n        var trim = function (str) { return str.replace(/^\\s+|\\s+$/g, ''); };\n        // In case of repeated headers, as per standards, first value need to be used\n        for (var _i = 0, _a = rawFrame.headers.reverse(); _i < _a.length; _i++) {\n            var header = _a[_i];\n            var idx = header.indexOf(':');\n            var key = trim(header[0]);\n            var value = trim(header[1]);\n            if (escapeHeaderValues && (rawFrame.command !== 'CONNECT') && (rawFrame.command !== 'CONNECTED')) {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers: headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues: escapeHeaderValues\n        });\n    };\n    /**\n     * @internal\n     */\n    FrameImpl.prototype.toString = function () {\n        return this.serializeCmdAndHeaders();\n    };\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    FrameImpl.prototype.serialize = function () {\n        var cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + byte_1.BYTE.NULL;\n        }\n    };\n    FrameImpl.prototype.serializeCmdAndHeaders = function () {\n        var lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (var _i = 0, _a = Object.keys(this.headers || {}); _i < _a.length; _i++) {\n            var name_1 = _a[_i];\n            var value = this.headers[name_1];\n            if (this.escapeHeaderValues && (this.command !== 'CONNECT') && (this.command !== 'CONNECTED')) {\n                lines.push(name_1 + \":\" + FrameImpl.hdrValueEscape(\"\" + value));\n            }\n            else {\n                lines.push(name_1 + \":\" + value);\n            }\n        }\n        if (this.isBinaryBody || (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(\"content-length:\" + this.bodyLength());\n        }\n        return lines.join(byte_1.BYTE.LF) + byte_1.BYTE.LF + byte_1.BYTE.LF;\n    };\n    FrameImpl.prototype.isBodyEmpty = function () {\n        return this.bodyLength() === 0;\n    };\n    FrameImpl.prototype.bodyLength = function () {\n        var binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    };\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    FrameImpl.sizeOfUTF8 = function (s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    };\n    FrameImpl.toUnit8Array = function (cmdAndHeaders, binaryBody) {\n        var uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        var nullTerminator = new Uint8Array([0]);\n        var uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    };\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    FrameImpl.marshall = function (params) {\n        var frame = new FrameImpl(params);\n        return frame.serialize();\n    };\n    /**\n     *  Escape header values\n     */\n    FrameImpl.hdrValueEscape = function (str) {\n        return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n    };\n    /**\n     * UnEscape header values\n     */\n    FrameImpl.hdrValueUnEscape = function (str) {\n        return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n    };\n    return FrameImpl;\n}());\nexports.FrameImpl = FrameImpl;\n\n\n/***/ }),\n\n/***/ \"./src/index.ts\":\n/*!**********************!*\\\n  !*** ./src/index.ts ***!\n  \\**********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./client */ \"./src/client.ts\"));\n__export(__webpack_require__(/*! ./frame-impl */ \"./src/frame-impl.ts\"));\n__export(__webpack_require__(/*! ./parser */ \"./src/parser.ts\"));\n__export(__webpack_require__(/*! ./stomp-config */ \"./src/stomp-config.ts\"));\n__export(__webpack_require__(/*! ./stomp-headers */ \"./src/stomp-headers.ts\"));\n__export(__webpack_require__(/*! ./stomp-subscription */ \"./src/stomp-subscription.ts\"));\n__export(__webpack_require__(/*! ./versions */ \"./src/versions.ts\"));\n__export(__webpack_require__(/*! ./web-socket-state */ \"./src/web-socket-state.ts\"));\n// Compatibility code\n__export(__webpack_require__(/*! ./compatibility/compat-client */ \"./src/compatibility/compat-client.ts\"));\n__export(__webpack_require__(/*! ./compatibility/stomp */ \"./src/compatibility/stomp.ts\"));\n\n\n/***/ }),\n\n/***/ \"./src/parser.ts\":\n/*!***********************!*\\\n  !*** ./src/parser.ts ***!\n  \\***********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internal\n */\nvar NULL = 0;\n/**\n * @internal\n */\nvar LF = 10;\n/**\n * @internal\n */\nvar CR = 13;\n/**\n * @internal\n */\nvar COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nvar Parser = /** @class */ (function () {\n    function Parser(onFrame, onIncomingPing) {\n        this.onFrame = onFrame;\n        this.onIncomingPing = onIncomingPing;\n        this._encoder = new TextEncoder();\n        this._decoder = new TextDecoder();\n        this._token = [];\n        this._initState();\n    }\n    Parser.prototype.parseChunk = function (segment, appendMissingNULLonIncoming) {\n        if (appendMissingNULLonIncoming === void 0) { appendMissingNULLonIncoming = false; }\n        var chunk;\n        if ((segment instanceof ArrayBuffer)) {\n            chunk = new Uint8Array(segment);\n        }\n        else {\n            chunk = this._encoder.encode(segment);\n        }\n        // See https://github.com/stomp-js/stompjs/issues/89\n        // Remove when underlying issue is fixed.\n        //\n        // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n        if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            var chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (var i = 0; i < chunk.length; i++) {\n            var byte = chunk[i];\n            this._onByte(byte);\n        }\n    };\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    Parser.prototype._collectFrame = function (byte) {\n        if (byte === NULL) { // Ignore\n            return;\n        }\n        if (byte === CR) { // Ignore CR\n            return;\n        }\n        if (byte === LF) { // Incoming Ping\n            this.onIncomingPing();\n            return;\n        }\n        this._onByte = this._collectCommand;\n        this._reinjectByte(byte);\n    };\n    Parser.prototype._collectCommand = function (byte) {\n        if (byte === CR) { // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    };\n    Parser.prototype._collectHeaders = function (byte) {\n        if (byte === CR) { // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._setupCollectBody();\n            return;\n        }\n        this._onByte = this._collectHeaderKey;\n        this._reinjectByte(byte);\n    };\n    Parser.prototype._reinjectByte = function (byte) {\n        this._onByte(byte);\n    };\n    Parser.prototype._collectHeaderKey = function (byte) {\n        if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n        }\n        this._consumeByte(byte);\n    };\n    Parser.prototype._collectHeaderValue = function (byte) {\n        if (byte === CR) { // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    };\n    Parser.prototype._setupCollectBody = function () {\n        var contentLengthHeader = this._results.headers.filter(function (header) {\n            return header[0] === 'content-length';\n        })[0];\n        if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n        }\n        else {\n            this._onByte = this._collectBodyNullTerminated;\n        }\n    };\n    Parser.prototype._collectBodyNullTerminated = function (byte) {\n        if (byte === NULL) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    };\n    Parser.prototype._collectBodyFixedSize = function (byte) {\n        // It is post decrement, so that we discard the trailing NULL octet\n        if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    };\n    Parser.prototype._retrievedBody = function () {\n        this._results.binaryBody = this._consumeTokenAsRaw();\n        this.onFrame(this._results);\n        this._initState();\n    };\n    // Rec Descent Parser helpers\n    Parser.prototype._consumeByte = function (byte) {\n        this._token.push(byte);\n    };\n    Parser.prototype._consumeTokenAsUTF8 = function () {\n        return this._decoder.decode(this._consumeTokenAsRaw());\n    };\n    Parser.prototype._consumeTokenAsRaw = function () {\n        var rawResult = new Uint8Array(this._token);\n        this._token = [];\n        return rawResult;\n    };\n    Parser.prototype._initState = function () {\n        this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined\n        };\n        this._token = [];\n        this._headerKey = undefined;\n        this._onByte = this._collectFrame;\n    };\n    return Parser;\n}());\nexports.Parser = Parser;\n\n\n/***/ }),\n\n/***/ \"./src/stomp-config.ts\":\n/*!*****************************!*\\\n  !*** ./src/stomp-config.ts ***!\n  \\*****************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Configuration options for STOMP Client, each key corresponds to\n * field by the same name in {@link Client}. This can be passed to\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n *\n * Part of `@stomp/stompjs`.\n */\nvar StompConfig = /** @class */ (function () {\n    function StompConfig() {\n    }\n    return StompConfig;\n}());\nexports.StompConfig = StompConfig;\n\n\n/***/ }),\n\n/***/ \"./src/stomp-handler.ts\":\n/*!******************************!*\\\n  !*** ./src/stomp-handler.ts ***!\n  \\******************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar byte_1 = __webpack_require__(/*! ./byte */ \"./src/byte.ts\");\nvar frame_impl_1 = __webpack_require__(/*! ./frame-impl */ \"./src/frame-impl.ts\");\nvar parser_1 = __webpack_require__(/*! ./parser */ \"./src/parser.ts\");\nvar versions_1 = __webpack_require__(/*! ./versions */ \"./src/versions.ts\");\nvar web_socket_state_1 = __webpack_require__(/*! ./web-socket-state */ \"./src/web-socket-state.ts\");\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nvar StompHandler = /** @class */ (function () {\n    function StompHandler(_client, _webSocket, config) {\n        var _this = this;\n        if (config === void 0) { config = {}; }\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: function (frame) {\n                _this.debug(\"connected to server \" + frame.headers.server);\n                _this._connected = true;\n                _this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (_this._connectedVersion === versions_1.Versions.V1_2) {\n                    _this._escapeHeaderValues = true;\n                }\n                _this._setupHeartbeat(frame.headers);\n                _this.onConnect(frame);\n            },\n            // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: function (frame) {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](http://www.rabbitmq.com/stomp.html)).\n                var subscription = frame.headers.subscription;\n                var onReceive = _this._subscriptions[subscription] || _this.onUnhandledMessage;\n                // bless the frame to be a Message\n                var message = frame;\n                var client = _this;\n                var messageId = _this._connectedVersion === versions_1.Versions.V1_2 ? message.headers.ack : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = function (headers) {\n                    if (headers === void 0) { headers = {}; }\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = function (headers) {\n                    if (headers === void 0) { headers = {}; }\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: function (frame) {\n                var callback = _this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete _this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    _this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: function (frame) {\n                _this.onStompError(frame);\n            }\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.configure(config);\n    }\n    Object.defineProperty(StompHandler.prototype, \"connectedVersion\", {\n        get: function () {\n            return this._connectedVersion;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StompHandler.prototype, \"connected\", {\n        get: function () {\n            return this._connected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StompHandler.prototype.configure = function (conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    };\n    StompHandler.prototype.start = function () {\n        var _this = this;\n        var parser = new parser_1.Parser(\n        // On Frame\n        function (rawFrame) {\n            var frame = frame_impl_1.FrameImpl.fromRawFrame(rawFrame, _this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!_this.logRawCommunication) {\n                _this.debug(\"<<< \" + frame);\n            }\n            var serverFrameHandler = _this._serverFrameHandlers[frame.command] || _this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        function () {\n            _this.debug('<<< PONG');\n        });\n        this._webSocket.onmessage = function (evt) {\n            _this.debug('Received data');\n            _this._lastServerActivityTS = Date.now();\n            if (_this.logRawCommunication) {\n                var rawChunkAsString = (evt.data instanceof ArrayBuffer) ? new TextDecoder().decode(evt.data) : evt.data;\n                _this.debug(\"<<< \" + rawChunkAsString);\n            }\n            parser.parseChunk(evt.data, _this.appendMissingNULLonIncoming);\n        };\n        this._webSocket.onclose = function (closeEvent) {\n            _this.debug(\"Connection closed to \" + _this._webSocket.url);\n            _this.onWebSocketClose(closeEvent);\n            _this._cleanUp();\n        };\n        this._webSocket.onerror = function (errorEvent) {\n            _this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = function () {\n            // Clone before updating\n            var connectHeaders = Object.assign({}, _this.connectHeaders);\n            _this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = _this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [_this.heartbeatOutgoing, _this.heartbeatIncoming].join(',');\n            _this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    };\n    StompHandler.prototype._setupHeartbeat = function (headers) {\n        var _this = this;\n        if ((headers.version !== versions_1.Versions.V1_1 && headers.version !== versions_1.Versions.V1_2)) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        var _a = (headers['heart-beat']).split(',').map(function (v) { return parseInt(v, 10); }), serverOutgoing = _a[0], serverIncoming = _a[1];\n        if ((this.heartbeatOutgoing !== 0) && (serverIncoming !== 0)) {\n            var ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(\"send PING every \" + ttl + \"ms\");\n            this._pinger = setInterval(function () {\n                if (_this._webSocket.readyState === web_socket_state_1.WebSocketState.OPEN) {\n                    _this._webSocket.send(byte_1.BYTE.LF);\n                    _this.debug('>>> PING');\n                }\n            }, ttl);\n        }\n        if ((this.heartbeatIncoming !== 0) && (serverOutgoing !== 0)) {\n            var ttl_1 = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(\"check PONG every \" + ttl_1 + \"ms\");\n            this._ponger = setInterval(function () {\n                var delta = Date.now() - _this._lastServerActivityTS;\n                // We wait twice the TTL to be flexible on window's setInterval calls\n                if (delta > (ttl_1 * 2)) {\n                    _this.debug(\"did not receive server activity for the last \" + delta + \"ms\");\n                    _this._closeWebsocket();\n                }\n            }, ttl_1);\n        }\n    };\n    StompHandler.prototype._closeWebsocket = function () {\n        this._webSocket.onmessage = function () { }; // ignore messages\n        this._webSocket.close();\n    };\n    StompHandler.prototype._transmit = function (params) {\n        var command = params.command, headers = params.headers, body = params.body, binaryBody = params.binaryBody, skipContentLengthHeader = params.skipContentLengthHeader;\n        var frame = new frame_impl_1.FrameImpl({\n            command: command,\n            headers: headers,\n            body: body,\n            binaryBody: binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader: skipContentLengthHeader\n        });\n        var rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(\">>> \" + rawChunk);\n        }\n        else {\n            this.debug(\">>> \" + frame);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            var out = rawChunk;\n            while (out.length > 0) {\n                var chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(\"chunk sent = \" + chunk.length + \", remaining = \" + out.length);\n            }\n        }\n    };\n    StompHandler.prototype.dispose = function () {\n        var _this = this;\n        if (this.connected) {\n            try {\n                // clone before updating\n                var disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = \"close-\" + this._counter++;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, function (frame) {\n                    _this._closeWebsocket();\n                    _this._cleanUp();\n                    _this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(\"Ignoring error during disconnect \" + error);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === web_socket_state_1.WebSocketState.CONNECTING\n                || this._webSocket.readyState === web_socket_state_1.WebSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    };\n    StompHandler.prototype._cleanUp = function () {\n        this._connected = false;\n        if (this._pinger) {\n            clearInterval(this._pinger);\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n        }\n    };\n    StompHandler.prototype.publish = function (params) {\n        var destination = params.destination, headers = params.headers, body = params.body, binaryBody = params.binaryBody, skipContentLengthHeader = params.skipContentLengthHeader;\n        var hdrs = Object.assign({ destination: destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body: body,\n            binaryBody: binaryBody,\n            skipContentLengthHeader: skipContentLengthHeader\n        });\n    };\n    StompHandler.prototype.watchForReceipt = function (receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    };\n    StompHandler.prototype.subscribe = function (destination, callback, headers) {\n        if (headers === void 0) { headers = {}; }\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = \"sub-\" + this._counter++;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers: headers });\n        var client = this;\n        return {\n            id: headers.id,\n            unsubscribe: function (hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            }\n        };\n    };\n    StompHandler.prototype.unsubscribe = function (id, headers) {\n        if (headers === void 0) { headers = {}; }\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers: headers });\n    };\n    StompHandler.prototype.begin = function (transactionId) {\n        var txId = transactionId || (\"tx-\" + this._counter++);\n        this._transmit({\n            command: 'BEGIN', headers: {\n                transaction: txId\n            }\n        });\n        var client = this;\n        return {\n            id: txId,\n            commit: function () {\n                client.commit(txId);\n            },\n            abort: function () {\n                client.abort(txId);\n            }\n        };\n    };\n    StompHandler.prototype.commit = function (transactionId) {\n        this._transmit({\n            command: 'COMMIT', headers: {\n                transaction: transactionId\n            }\n        });\n    };\n    StompHandler.prototype.abort = function (transactionId) {\n        this._transmit({\n            command: 'ABORT', headers: {\n                transaction: transactionId\n            }\n        });\n    };\n    StompHandler.prototype.ack = function (messageId, subscriptionId, headers) {\n        if (headers === void 0) { headers = {}; }\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === versions_1.Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers: headers });\n    };\n    StompHandler.prototype.nack = function (messageId, subscriptionId, headers) {\n        if (headers === void 0) { headers = {}; }\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === versions_1.Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers: headers });\n    };\n    return StompHandler;\n}());\nexports.StompHandler = StompHandler;\n\n\n/***/ }),\n\n/***/ \"./src/stomp-headers.ts\":\n/*!******************************!*\\\n  !*** ./src/stomp-headers.ts ***!\n  \\******************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * STOMP headers. Many functions calls will accept headers as parameters.\n * The headers sent by Broker will be available as [IFrame#headers]{@link IFrame#headers}.\n *\n * `key` and `value` must be valid strings.\n * In addition, `key` must not contain `CR`, `LF`, or `:`.\n *\n * Part of `@stomp/stompjs`.\n */\nvar StompHeaders = /** @class */ (function () {\n    function StompHeaders() {\n    }\n    return StompHeaders;\n}());\nexports.StompHeaders = StompHeaders;\n\n\n/***/ }),\n\n/***/ \"./src/stomp-subscription.ts\":\n/*!***********************************!*\\\n  !*** ./src/stomp-subscription.ts ***!\n  \\***********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Call [Client#subscribe]{@link Client#subscribe} to create a StompSubscription.\n *\n * Part of `@stomp/stompjs`.\n */\nvar StompSubscription = /** @class */ (function () {\n    function StompSubscription() {\n    }\n    return StompSubscription;\n}());\nexports.StompSubscription = StompSubscription;\n\n\n/***/ }),\n\n/***/ \"./src/versions.ts\":\n/*!*************************!*\\\n  !*** ./src/versions.ts ***!\n  \\*************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nvar Versions = /** @class */ (function () {\n    /**\n     * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n     *\n     * You will an instance if this class if you want to override supported versions to be declared during\n     * STOMP handshake.\n     */\n    function Versions(versions) {\n        this.versions = versions;\n    }\n    /**\n     * Used as part of CONNECT STOMP Frame\n     */\n    Versions.prototype.supportedVersions = function () {\n        return this.versions.join(',');\n    };\n    /**\n     * Used while creating a WebSocket\n     */\n    Versions.prototype.protocolVersions = function () {\n        return this.versions.map(function (x) { return \"v\" + x.replace('.', '') + \".stomp\"; });\n    };\n    /**\n     * Indicates protocol version 1.0\n     */\n    Versions.V1_0 = '1.0';\n    /**\n     * Indicates protocol version 1.1\n     */\n    Versions.V1_1 = '1.1';\n    /**\n     * Indicates protocol version 1.2\n     */\n    Versions.V1_2 = '1.2';\n    /**\n     * @internal\n     */\n    Versions.default = new Versions([Versions.V1_0, Versions.V1_1, Versions.V1_2]);\n    return Versions;\n}());\nexports.Versions = Versions;\n\n\n/***/ }),\n\n/***/ \"./src/web-socket-state.ts\":\n/*!*********************************!*\\\n  !*** ./src/web-socket-state.ts ***!\n  \\*********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Possible states for the WebSocket, copied here to avoid dependency on WebSocket class\n *\n * Part of `@stomp/rx-stomp`\n *\n * @internal\n */\nvar WebSocketState;\n(function (WebSocketState) {\n    WebSocketState[WebSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    WebSocketState[WebSocketState[\"OPEN\"] = 1] = \"OPEN\";\n    WebSocketState[WebSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n    WebSocketState[WebSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(WebSocketState = exports.WebSocketState || (exports.WebSocketState = {}));\n\n\n/***/ }),\n\n/***/ 0:\n/*!****************************!*\\\n  !*** multi ./src/index.ts ***!\n  \\****************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(/*! /home/kdeepak/MyWork/Tech/stomp/stompjs/src/index.ts */\"./src/index.ts\");\n\n\n/***/ })\n\n/******/ });\n});\n//# sourceMappingURL=stomp.umd.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@stomp/stompjs/bundles/stomp.umd.js\n");

/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/loglevel/lib/loglevel.js\n");

/***/ }),

/***/ "./src/main/ts/audio/ctx.ts":
/*!**********************************!*\
  !*** ./src/main/ts/audio/ctx.ts ***!
  \**********************************/
/*! exports provided: createOsc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createOsc\", function() { return createOsc; });\n// Based on https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Simple_synth\nconst audioContext = new AudioContext();\nconst masterGainNode = audioContext.createGain();\nmasterGainNode.connect(audioContext.destination);\nconst createOsc = () => {\n    const osc = audioContext.createOscillator();\n    osc.connect(masterGainNode);\n    return osc;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi90cy9hdWRpby9jdHgudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi90cy9hdWRpby9jdHgudHM/NWYzMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCYXNlZCBvbiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViX0F1ZGlvX0FQSS9TaW1wbGVfc3ludGhcblxuY29uc3QgYXVkaW9Db250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuXG5jb25zdCBtYXN0ZXJHYWluTm9kZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG5tYXN0ZXJHYWluTm9kZS5jb25uZWN0KGF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XG5cbmNvbnN0IGNyZWF0ZU9zYyA9ICgpOiBPc2NpbGxhdG9yTm9kZSA9PiB7XG4gICAgY29uc3Qgb3NjID0gYXVkaW9Db250ZXh0LmNyZWF0ZU9zY2lsbGF0b3IoKTtcbiAgICBvc2MuY29ubmVjdChtYXN0ZXJHYWluTm9kZSk7XG4gICAgcmV0dXJuIG9zYztcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZU9zYyB9O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/ts/audio/ctx.ts\n");

/***/ }),

/***/ "./src/main/ts/audio/keyboard.ts":
/*!***************************************!*\
  !*** ./src/main/ts/audio/keyboard.ts ***!
  \***************************************/
/*! exports provided: createKeyboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createKeyboard\", function() { return createKeyboard; });\n/* harmony import */ var _notes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notes */ \"./src/main/ts/audio/notes.ts\");\n\nconst createKeyboard = (container, onPress) => {\n    const keys = [];\n    for (let octaveNumber = 0; octaveNumber < _notes__WEBPACK_IMPORTED_MODULE_0__[\"NOTE_TABLE\"].length; octaveNumber++) {\n        const octaveKeys = _notes__WEBPACK_IMPORTED_MODULE_0__[\"NOTE_TABLE\"][octaveNumber];\n        for (const key of Object.keys(octaveKeys)) {\n            const keyElement = document.createElement(\"button\");\n            keyElement.textContent = `${key}${octaveNumber}`;\n            keyElement.addEventListener(\"click\", () => onPress({ key, octave: octaveNumber }));\n            keys.push(keyElement);\n        }\n    }\n    container.append(...keys);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi90cy9hdWRpby9rZXlib2FyZC50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tYWluL3RzL2F1ZGlvL2tleWJvYXJkLnRzPzBmMDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBNaWRpRXZlbnQgfSBmcm9tIFwiLi9taWRpRXZlbnRcIjtcbmltcG9ydCB7IE5PVEVfVEFCTEUgfSBmcm9tIFwiLi9ub3Rlc1wiO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlS2V5Ym9hcmQgPSAoXG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICBvblByZXNzOiAobWlkaUV2ZW50OiBNaWRpRXZlbnQpID0+IHZvaWRcbik6IHZvaWQgPT4ge1xuICAgIGNvbnN0IGtleXM6IEhUTUxFbGVtZW50W10gPSBbXTtcbiAgICBmb3IgKFxuICAgICAgICBsZXQgb2N0YXZlTnVtYmVyID0gMDtcbiAgICAgICAgb2N0YXZlTnVtYmVyIDwgTk9URV9UQUJMRS5sZW5ndGg7XG4gICAgICAgIG9jdGF2ZU51bWJlcisrXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IG9jdGF2ZUtleXMgPSBOT1RFX1RBQkxFW29jdGF2ZU51bWJlcl07XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG9jdGF2ZUtleXMpKSB7XG4gICAgICAgICAgICBjb25zdCBrZXlFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgICAgIGtleUVsZW1lbnQudGV4dENvbnRlbnQgPSBgJHtrZXl9JHtvY3RhdmVOdW1iZXJ9YDtcbiAgICAgICAgICAgIGtleUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+XG4gICAgICAgICAgICAgICAgb25QcmVzcyh7IGtleSwgb2N0YXZlOiBvY3RhdmVOdW1iZXIgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBrZXlzLnB1c2goa2V5RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29udGFpbmVyLmFwcGVuZCguLi5rZXlzKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUNBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFJQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/ts/audio/keyboard.ts\n");

/***/ }),

/***/ "./src/main/ts/audio/notes.ts":
/*!************************************!*\
  !*** ./src/main/ts/audio/notes.ts ***!
  \************************************/
/*! exports provided: NOTE_TABLE, getNote */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NOTE_TABLE\", function() { return NOTE_TABLE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getNote\", function() { return getNote; });\nconst createNoteTable = () => {\n    const noteFreq = [];\n    for (let i = 0; i < 9; i++) {\n        noteFreq[i] = {};\n    }\n    noteFreq[0][\"A\"] = 27.5;\n    noteFreq[0][\"A#\"] = 29.135235094880619;\n    noteFreq[0][\"B\"] = 30.867706328507756;\n    noteFreq[1][\"C\"] = 32.703195662574829;\n    noteFreq[1][\"C#\"] = 34.647828872109012;\n    noteFreq[1][\"D\"] = 36.708095989675945;\n    noteFreq[1][\"D#\"] = 38.890872965260113;\n    noteFreq[1][\"E\"] = 41.203444614108741;\n    noteFreq[1][\"F\"] = 43.653528929125485;\n    noteFreq[1][\"F#\"] = 46.249302838954299;\n    noteFreq[1][\"G\"] = 48.999429497718661;\n    noteFreq[1][\"G#\"] = 51.913087197493142;\n    noteFreq[1][\"A\"] = 55.0;\n    noteFreq[1][\"A#\"] = 58.270470189761239;\n    noteFreq[1][\"B\"] = 61.735412657015513;\n    noteFreq[2][\"C\"] = 65.406391325149658;\n    noteFreq[2][\"C#\"] = 69.295657744218024;\n    noteFreq[2][\"D\"] = 73.41619197935189;\n    noteFreq[2][\"D#\"] = 77.781745930520227;\n    noteFreq[2][\"E\"] = 82.406889228217482;\n    noteFreq[2][\"F\"] = 87.307057858250971;\n    noteFreq[2][\"F#\"] = 92.498605677908599;\n    noteFreq[2][\"G\"] = 97.998858995437323;\n    noteFreq[2][\"G#\"] = 103.826174394986284;\n    noteFreq[2][\"A\"] = 110.0;\n    noteFreq[2][\"A#\"] = 116.540940379522479;\n    noteFreq[2][\"B\"] = 123.470825314031027;\n    noteFreq[3][\"C\"] = 130.812782650299317;\n    noteFreq[3][\"C#\"] = 138.591315488436048;\n    noteFreq[3][\"D\"] = 146.83238395870378;\n    noteFreq[3][\"D#\"] = 155.563491861040455;\n    noteFreq[3][\"E\"] = 164.813778456434964;\n    noteFreq[3][\"F\"] = 174.614115716501942;\n    noteFreq[3][\"F#\"] = 184.997211355817199;\n    noteFreq[3][\"G\"] = 195.997717990874647;\n    noteFreq[3][\"G#\"] = 207.652348789972569;\n    noteFreq[3][\"A\"] = 220.0;\n    noteFreq[3][\"A#\"] = 233.081880759044958;\n    noteFreq[3][\"B\"] = 246.941650628062055;\n    noteFreq[4][\"C\"] = 261.625565300598634;\n    noteFreq[4][\"C#\"] = 277.182630976872096;\n    noteFreq[4][\"D\"] = 293.66476791740756;\n    noteFreq[4][\"D#\"] = 311.12698372208091;\n    noteFreq[4][\"E\"] = 329.627556912869929;\n    noteFreq[4][\"F\"] = 349.228231433003884;\n    noteFreq[4][\"F#\"] = 369.994422711634398;\n    noteFreq[4][\"G\"] = 391.995435981749294;\n    noteFreq[4][\"G#\"] = 415.304697579945138;\n    noteFreq[4][\"A\"] = 440.0;\n    noteFreq[4][\"A#\"] = 466.163761518089916;\n    noteFreq[4][\"B\"] = 493.883301256124111;\n    noteFreq[5][\"C\"] = 523.251130601197269;\n    noteFreq[5][\"C#\"] = 554.365261953744192;\n    noteFreq[5][\"D\"] = 587.32953583481512;\n    noteFreq[5][\"D#\"] = 622.253967444161821;\n    noteFreq[5][\"E\"] = 659.255113825739859;\n    noteFreq[5][\"F\"] = 698.456462866007768;\n    noteFreq[5][\"F#\"] = 739.988845423268797;\n    noteFreq[5][\"G\"] = 783.990871963498588;\n    noteFreq[5][\"G#\"] = 830.609395159890277;\n    noteFreq[5][\"A\"] = 880.0;\n    noteFreq[5][\"A#\"] = 932.327523036179832;\n    noteFreq[5][\"B\"] = 987.766602512248223;\n    noteFreq[6][\"C\"] = 1046.502261202394538;\n    noteFreq[6][\"C#\"] = 1108.730523907488384;\n    noteFreq[6][\"D\"] = 1174.659071669630241;\n    noteFreq[6][\"D#\"] = 1244.507934888323642;\n    noteFreq[6][\"E\"] = 1318.510227651479718;\n    noteFreq[6][\"F\"] = 1396.912925732015537;\n    noteFreq[6][\"F#\"] = 1479.977690846537595;\n    noteFreq[6][\"G\"] = 1567.981743926997176;\n    noteFreq[6][\"G#\"] = 1661.218790319780554;\n    noteFreq[6][\"A\"] = 1760.0;\n    noteFreq[6][\"A#\"] = 1864.655046072359665;\n    noteFreq[6][\"B\"] = 1975.533205024496447;\n    noteFreq[7][\"C\"] = 2093.004522404789077;\n    noteFreq[7][\"C#\"] = 2217.461047814976769;\n    noteFreq[7][\"D\"] = 2349.318143339260482;\n    noteFreq[7][\"D#\"] = 2489.015869776647285;\n    noteFreq[7][\"E\"] = 2637.020455302959437;\n    noteFreq[7][\"F\"] = 2793.825851464031075;\n    noteFreq[7][\"F#\"] = 2959.955381693075191;\n    noteFreq[7][\"G\"] = 3135.963487853994352;\n    noteFreq[7][\"G#\"] = 3322.437580639561108;\n    noteFreq[7][\"A\"] = 3520.0;\n    noteFreq[7][\"A#\"] = 3729.310092144719331;\n    noteFreq[7][\"B\"] = 3951.066410048992894;\n    noteFreq[8][\"C\"] = 4186.009044809578154;\n    return noteFreq;\n};\nconst NOTE_TABLE = createNoteTable();\nconst getNote = (midiEvent) => { var _a, _b; return (_b = (_a = NOTE_TABLE[midiEvent.octave]) === null || _a === void 0 ? void 0 : _a[midiEvent.key]) !== null && _b !== void 0 ? _b : null; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi90cy9hdWRpby9ub3Rlcy50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tYWluL3RzL2F1ZGlvL25vdGVzLnRzP2ZlNzEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBNaWRpRXZlbnQgfSBmcm9tIFwiLi9taWRpRXZlbnRcIjtcblxuaW50ZXJmYWNlIE9jdGF2ZSB7XG4gICAgW2tleTogc3RyaW5nXTogbnVtYmVyO1xufVxuXG50eXBlIE5vdGVUYWJsZSA9IE9jdGF2ZVtdO1xuXG5jb25zdCBjcmVhdGVOb3RlVGFibGUgPSAoKTogTm90ZVRhYmxlID0+IHtcbiAgICBjb25zdCBub3RlRnJlcTogTm90ZVRhYmxlID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA5OyBpKyspIHtcbiAgICAgICAgbm90ZUZyZXFbaV0gPSB7fTtcbiAgICB9XG5cbiAgICBub3RlRnJlcVswXVtcIkFcIl0gPSAyNy41O1xuICAgIG5vdGVGcmVxWzBdW1wiQSNcIl0gPSAyOS4xMzUyMzUwOTQ4ODA2MTk7XG4gICAgbm90ZUZyZXFbMF1bXCJCXCJdID0gMzAuODY3NzA2MzI4NTA3NzU2O1xuXG4gICAgbm90ZUZyZXFbMV1bXCJDXCJdID0gMzIuNzAzMTk1NjYyNTc0ODI5O1xuICAgIG5vdGVGcmVxWzFdW1wiQyNcIl0gPSAzNC42NDc4Mjg4NzIxMDkwMTI7XG4gICAgbm90ZUZyZXFbMV1bXCJEXCJdID0gMzYuNzA4MDk1OTg5Njc1OTQ1O1xuICAgIG5vdGVGcmVxWzFdW1wiRCNcIl0gPSAzOC44OTA4NzI5NjUyNjAxMTM7XG4gICAgbm90ZUZyZXFbMV1bXCJFXCJdID0gNDEuMjAzNDQ0NjE0MTA4NzQxO1xuICAgIG5vdGVGcmVxWzFdW1wiRlwiXSA9IDQzLjY1MzUyODkyOTEyNTQ4NTtcbiAgICBub3RlRnJlcVsxXVtcIkYjXCJdID0gNDYuMjQ5MzAyODM4OTU0Mjk5O1xuICAgIG5vdGVGcmVxWzFdW1wiR1wiXSA9IDQ4Ljk5OTQyOTQ5NzcxODY2MTtcbiAgICBub3RlRnJlcVsxXVtcIkcjXCJdID0gNTEuOTEzMDg3MTk3NDkzMTQyO1xuICAgIG5vdGVGcmVxWzFdW1wiQVwiXSA9IDU1LjA7XG4gICAgbm90ZUZyZXFbMV1bXCJBI1wiXSA9IDU4LjI3MDQ3MDE4OTc2MTIzOTtcbiAgICBub3RlRnJlcVsxXVtcIkJcIl0gPSA2MS43MzU0MTI2NTcwMTU1MTM7XG4gICAgbm90ZUZyZXFbMl1bXCJDXCJdID0gNjUuNDA2MzkxMzI1MTQ5NjU4O1xuICAgIG5vdGVGcmVxWzJdW1wiQyNcIl0gPSA2OS4yOTU2NTc3NDQyMTgwMjQ7XG4gICAgbm90ZUZyZXFbMl1bXCJEXCJdID0gNzMuNDE2MTkxOTc5MzUxODk7XG4gICAgbm90ZUZyZXFbMl1bXCJEI1wiXSA9IDc3Ljc4MTc0NTkzMDUyMDIyNztcbiAgICBub3RlRnJlcVsyXVtcIkVcIl0gPSA4Mi40MDY4ODkyMjgyMTc0ODI7XG4gICAgbm90ZUZyZXFbMl1bXCJGXCJdID0gODcuMzA3MDU3ODU4MjUwOTcxO1xuICAgIG5vdGVGcmVxWzJdW1wiRiNcIl0gPSA5Mi40OTg2MDU2Nzc5MDg1OTk7XG4gICAgbm90ZUZyZXFbMl1bXCJHXCJdID0gOTcuOTk4ODU4OTk1NDM3MzIzO1xuICAgIG5vdGVGcmVxWzJdW1wiRyNcIl0gPSAxMDMuODI2MTc0Mzk0OTg2Mjg0O1xuICAgIG5vdGVGcmVxWzJdW1wiQVwiXSA9IDExMC4wO1xuICAgIG5vdGVGcmVxWzJdW1wiQSNcIl0gPSAxMTYuNTQwOTQwMzc5NTIyNDc5O1xuICAgIG5vdGVGcmVxWzJdW1wiQlwiXSA9IDEyMy40NzA4MjUzMTQwMzEwMjc7XG5cbiAgICBub3RlRnJlcVszXVtcIkNcIl0gPSAxMzAuODEyNzgyNjUwMjk5MzE3O1xuICAgIG5vdGVGcmVxWzNdW1wiQyNcIl0gPSAxMzguNTkxMzE1NDg4NDM2MDQ4O1xuICAgIG5vdGVGcmVxWzNdW1wiRFwiXSA9IDE0Ni44MzIzODM5NTg3MDM3ODtcbiAgICBub3RlRnJlcVszXVtcIkQjXCJdID0gMTU1LjU2MzQ5MTg2MTA0MDQ1NTtcbiAgICBub3RlRnJlcVszXVtcIkVcIl0gPSAxNjQuODEzNzc4NDU2NDM0OTY0O1xuICAgIG5vdGVGcmVxWzNdW1wiRlwiXSA9IDE3NC42MTQxMTU3MTY1MDE5NDI7XG4gICAgbm90ZUZyZXFbM11bXCJGI1wiXSA9IDE4NC45OTcyMTEzNTU4MTcxOTk7XG4gICAgbm90ZUZyZXFbM11bXCJHXCJdID0gMTk1Ljk5NzcxNzk5MDg3NDY0NztcbiAgICBub3RlRnJlcVszXVtcIkcjXCJdID0gMjA3LjY1MjM0ODc4OTk3MjU2OTtcbiAgICBub3RlRnJlcVszXVtcIkFcIl0gPSAyMjAuMDtcbiAgICBub3RlRnJlcVszXVtcIkEjXCJdID0gMjMzLjA4MTg4MDc1OTA0NDk1ODtcbiAgICBub3RlRnJlcVszXVtcIkJcIl0gPSAyNDYuOTQxNjUwNjI4MDYyMDU1O1xuXG4gICAgbm90ZUZyZXFbNF1bXCJDXCJdID0gMjYxLjYyNTU2NTMwMDU5ODYzNDtcbiAgICBub3RlRnJlcVs0XVtcIkMjXCJdID0gMjc3LjE4MjYzMDk3Njg3MjA5NjtcbiAgICBub3RlRnJlcVs0XVtcIkRcIl0gPSAyOTMuNjY0NzY3OTE3NDA3NTY7XG4gICAgbm90ZUZyZXFbNF1bXCJEI1wiXSA9IDMxMS4xMjY5ODM3MjIwODA5MTtcbiAgICBub3RlRnJlcVs0XVtcIkVcIl0gPSAzMjkuNjI3NTU2OTEyODY5OTI5O1xuICAgIG5vdGVGcmVxWzRdW1wiRlwiXSA9IDM0OS4yMjgyMzE0MzMwMDM4ODQ7XG4gICAgbm90ZUZyZXFbNF1bXCJGI1wiXSA9IDM2OS45OTQ0MjI3MTE2MzQzOTg7XG4gICAgbm90ZUZyZXFbNF1bXCJHXCJdID0gMzkxLjk5NTQzNTk4MTc0OTI5NDtcbiAgICBub3RlRnJlcVs0XVtcIkcjXCJdID0gNDE1LjMwNDY5NzU3OTk0NTEzODtcbiAgICBub3RlRnJlcVs0XVtcIkFcIl0gPSA0NDAuMDtcbiAgICBub3RlRnJlcVs0XVtcIkEjXCJdID0gNDY2LjE2Mzc2MTUxODA4OTkxNjtcbiAgICBub3RlRnJlcVs0XVtcIkJcIl0gPSA0OTMuODgzMzAxMjU2MTI0MTExO1xuXG4gICAgbm90ZUZyZXFbNV1bXCJDXCJdID0gNTIzLjI1MTEzMDYwMTE5NzI2OTtcbiAgICBub3RlRnJlcVs1XVtcIkMjXCJdID0gNTU0LjM2NTI2MTk1Mzc0NDE5MjtcbiAgICBub3RlRnJlcVs1XVtcIkRcIl0gPSA1ODcuMzI5NTM1ODM0ODE1MTI7XG4gICAgbm90ZUZyZXFbNV1bXCJEI1wiXSA9IDYyMi4yNTM5Njc0NDQxNjE4MjE7XG4gICAgbm90ZUZyZXFbNV1bXCJFXCJdID0gNjU5LjI1NTExMzgyNTczOTg1OTtcbiAgICBub3RlRnJlcVs1XVtcIkZcIl0gPSA2OTguNDU2NDYyODY2MDA3NzY4O1xuICAgIG5vdGVGcmVxWzVdW1wiRiNcIl0gPSA3MzkuOTg4ODQ1NDIzMjY4Nzk3O1xuICAgIG5vdGVGcmVxWzVdW1wiR1wiXSA9IDc4My45OTA4NzE5NjM0OTg1ODg7XG4gICAgbm90ZUZyZXFbNV1bXCJHI1wiXSA9IDgzMC42MDkzOTUxNTk4OTAyNzc7XG4gICAgbm90ZUZyZXFbNV1bXCJBXCJdID0gODgwLjA7XG4gICAgbm90ZUZyZXFbNV1bXCJBI1wiXSA9IDkzMi4zMjc1MjMwMzYxNzk4MzI7XG4gICAgbm90ZUZyZXFbNV1bXCJCXCJdID0gOTg3Ljc2NjYwMjUxMjI0ODIyMztcblxuICAgIG5vdGVGcmVxWzZdW1wiQ1wiXSA9IDEwNDYuNTAyMjYxMjAyMzk0NTM4O1xuICAgIG5vdGVGcmVxWzZdW1wiQyNcIl0gPSAxMTA4LjczMDUyMzkwNzQ4ODM4NDtcbiAgICBub3RlRnJlcVs2XVtcIkRcIl0gPSAxMTc0LjY1OTA3MTY2OTYzMDI0MTtcbiAgICBub3RlRnJlcVs2XVtcIkQjXCJdID0gMTI0NC41MDc5MzQ4ODgzMjM2NDI7XG4gICAgbm90ZUZyZXFbNl1bXCJFXCJdID0gMTMxOC41MTAyMjc2NTE0Nzk3MTg7XG4gICAgbm90ZUZyZXFbNl1bXCJGXCJdID0gMTM5Ni45MTI5MjU3MzIwMTU1Mzc7XG4gICAgbm90ZUZyZXFbNl1bXCJGI1wiXSA9IDE0NzkuOTc3NjkwODQ2NTM3NTk1O1xuICAgIG5vdGVGcmVxWzZdW1wiR1wiXSA9IDE1NjcuOTgxNzQzOTI2OTk3MTc2O1xuICAgIG5vdGVGcmVxWzZdW1wiRyNcIl0gPSAxNjYxLjIxODc5MDMxOTc4MDU1NDtcbiAgICBub3RlRnJlcVs2XVtcIkFcIl0gPSAxNzYwLjA7XG4gICAgbm90ZUZyZXFbNl1bXCJBI1wiXSA9IDE4NjQuNjU1MDQ2MDcyMzU5NjY1O1xuICAgIG5vdGVGcmVxWzZdW1wiQlwiXSA9IDE5NzUuNTMzMjA1MDI0NDk2NDQ3O1xuICAgIG5vdGVGcmVxWzddW1wiQ1wiXSA9IDIwOTMuMDA0NTIyNDA0Nzg5MDc3O1xuICAgIG5vdGVGcmVxWzddW1wiQyNcIl0gPSAyMjE3LjQ2MTA0NzgxNDk3Njc2OTtcbiAgICBub3RlRnJlcVs3XVtcIkRcIl0gPSAyMzQ5LjMxODE0MzMzOTI2MDQ4MjtcbiAgICBub3RlRnJlcVs3XVtcIkQjXCJdID0gMjQ4OS4wMTU4Njk3NzY2NDcyODU7XG4gICAgbm90ZUZyZXFbN11bXCJFXCJdID0gMjYzNy4wMjA0NTUzMDI5NTk0Mzc7XG4gICAgbm90ZUZyZXFbN11bXCJGXCJdID0gMjc5My44MjU4NTE0NjQwMzEwNzU7XG4gICAgbm90ZUZyZXFbN11bXCJGI1wiXSA9IDI5NTkuOTU1MzgxNjkzMDc1MTkxO1xuICAgIG5vdGVGcmVxWzddW1wiR1wiXSA9IDMxMzUuOTYzNDg3ODUzOTk0MzUyO1xuICAgIG5vdGVGcmVxWzddW1wiRyNcIl0gPSAzMzIyLjQzNzU4MDYzOTU2MTEwODtcbiAgICBub3RlRnJlcVs3XVtcIkFcIl0gPSAzNTIwLjA7XG4gICAgbm90ZUZyZXFbN11bXCJBI1wiXSA9IDM3MjkuMzEwMDkyMTQ0NzE5MzMxO1xuICAgIG5vdGVGcmVxWzddW1wiQlwiXSA9IDM5NTEuMDY2NDEwMDQ4OTkyODk0O1xuXG4gICAgbm90ZUZyZXFbOF1bXCJDXCJdID0gNDE4Ni4wMDkwNDQ4MDk1NzgxNTQ7XG4gICAgcmV0dXJuIG5vdGVGcmVxO1xufTtcblxuZXhwb3J0IGNvbnN0IE5PVEVfVEFCTEUgPSBjcmVhdGVOb3RlVGFibGUoKTtcblxuZXhwb3J0IGNvbnN0IGdldE5vdGUgPSAobWlkaUV2ZW50OiBNaWRpRXZlbnQpOiBudW1iZXIgfCBudWxsID0+XG4gICAgTk9URV9UQUJMRVttaWRpRXZlbnQub2N0YXZlXT8uW21pZGlFdmVudC5rZXldID8/IG51bGw7XG4iXSwibWFwcGluZ3MiOiJBQVFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/ts/audio/notes.ts\n");

/***/ }),

/***/ "./src/main/ts/audio/synth.ts":
/*!************************************!*\
  !*** ./src/main/ts/audio/synth.ts ***!
  \************************************/
/*! exports provided: pressKey */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pressKey\", function() { return pressKey; });\n/* harmony import */ var _ctx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ctx */ \"./src/main/ts/audio/ctx.ts\");\n/* harmony import */ var _notes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notes */ \"./src/main/ts/audio/notes.ts\");\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logger */ \"./src/main/ts/logger.ts\");\n\n\n\nconst logger = Object(_logger__WEBPACK_IMPORTED_MODULE_2__[\"getLogger\"])(\"Synth\");\nconst pressKey = (midiEvent) => {\n    const osc = Object(_ctx__WEBPACK_IMPORTED_MODULE_0__[\"createOsc\"])();\n    const note = Object(_notes__WEBPACK_IMPORTED_MODULE_1__[\"getNote\"])(midiEvent);\n    if (note == null) {\n        logger.warn(`Could not find note for ${JSON.stringify(midiEvent)}.`);\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        return () => { };\n    }\n    osc.frequency.value = note;\n    logger.debug(`Start playing ${JSON.stringify(midiEvent)}.`);\n    osc.start();\n    return () => {\n        logger.debug(`Stop playing ${JSON.stringify(midiEvent)}.`);\n        osc.stop();\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi90cy9hdWRpby9zeW50aC50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tYWluL3RzL2F1ZGlvL3N5bnRoLnRzPzA4MTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBNaWRpRXZlbnQgfSBmcm9tIFwiLi9taWRpRXZlbnRcIjtcbmltcG9ydCB7IGNyZWF0ZU9zYyB9IGZyb20gXCIuL2N0eFwiO1xuaW1wb3J0IHsgZ2V0Tm90ZSB9IGZyb20gXCIuL25vdGVzXCI7XG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5cbmNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcihcIlN5bnRoXCIpO1xuXG5leHBvcnQgdHlwZSBSZWxlYXNlQ2FsbGJhY2sgPSAoKSA9PiB2b2lkO1xuXG5leHBvcnQgY29uc3QgcHJlc3NLZXkgPSAobWlkaUV2ZW50OiBNaWRpRXZlbnQpOiBSZWxlYXNlQ2FsbGJhY2sgPT4ge1xuICAgIGNvbnN0IG9zYyA9IGNyZWF0ZU9zYygpO1xuXG4gICAgY29uc3Qgbm90ZSA9IGdldE5vdGUobWlkaUV2ZW50KTtcbiAgICBpZiAobm90ZSA9PSBudWxsKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKGBDb3VsZCBub3QgZmluZCBub3RlIGZvciAke0pTT04uc3RyaW5naWZ5KG1pZGlFdmVudCl9LmApO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gICAgICAgIHJldHVybiAoKSA9PiB7fTtcbiAgICB9XG5cbiAgICBvc2MuZnJlcXVlbmN5LnZhbHVlID0gbm90ZTtcblxuICAgIGxvZ2dlci5kZWJ1ZyhgU3RhcnQgcGxheWluZyAke0pTT04uc3RyaW5naWZ5KG1pZGlFdmVudCl9LmApO1xuICAgIG9zYy5zdGFydCgpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgU3RvcCBwbGF5aW5nICR7SlNPTi5zdHJpbmdpZnkobWlkaUV2ZW50KX0uYCk7XG4gICAgICAgIG9zYy5zdG9wKCk7XG4gICAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/ts/audio/synth.ts\n");

/***/ }),

/***/ "./src/main/ts/logger.ts":
/*!*******************************!*\
  !*** ./src/main/ts/logger.ts ***!
  \*******************************/
/*! exports provided: getLogger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLogger\", function() { return getLogger; });\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! loglevel */ \"./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _mode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mode */ \"./src/main/ts/mode.ts\");\n\n\nconst getLogger = (consumer) => {\n    const logger = Object(loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"])(consumer);\n    logger.setLevel(_mode__WEBPACK_IMPORTED_MODULE_1__[\"DEVELOPMENT_MODE\"] ? loglevel__WEBPACK_IMPORTED_MODULE_0__[\"levels\"].DEBUG : loglevel__WEBPACK_IMPORTED_MODULE_0__[\"levels\"].WARN);\n    return logger;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi90cy9sb2dnZXIudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi90cy9sb2dnZXIudHM/YzIwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IExvZ2dlciB9IGZyb20gXCJsb2dsZXZlbFwiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIGFzIGdldExvZ2xldmVsTG9nZ2VyLCBsZXZlbHMgfSBmcm9tIFwibG9nbGV2ZWxcIjtcbmltcG9ydCB7IERFVkVMT1BNRU5UX01PREUgfSBmcm9tIFwiLi9tb2RlXCI7XG5cbmNvbnN0IGdldExvZ2dlciA9IChjb25zdW1lcjogc3RyaW5nKTogTG9nZ2VyID0+IHtcbiAgICBjb25zdCBsb2dnZXIgPSBnZXRMb2dsZXZlbExvZ2dlcihjb25zdW1lcik7XG4gICAgbG9nZ2VyLnNldExldmVsKERFVkVMT1BNRU5UX01PREUgPyBsZXZlbHMuREVCVUcgOiBsZXZlbHMuV0FSTik7XG4gICAgcmV0dXJuIGxvZ2dlcjtcbn07XG5cbmV4cG9ydCB7IGdldExvZ2dlciB9O1xuIl0sIm1hcHBpbmdzIjoiQUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/ts/logger.ts\n");

/***/ }),

/***/ "./src/main/ts/main.ts":
/*!*****************************!*\
  !*** ./src/main/ts/main.ts ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ \"./src/main/ts/logger.ts\");\n/* harmony import */ var _messaging_ws__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messaging/ws */ \"./src/main/ts/messaging/ws.ts\");\n/* harmony import */ var _audio_synth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./audio/synth */ \"./src/main/ts/audio/synth.ts\");\n/* harmony import */ var _audio_keyboard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./audio/keyboard */ \"./src/main/ts/audio/keyboard.ts\");\n\n\n\n\nconst logger = Object(_logger__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"])(\"main\");\nconst keyboardContainer = document.getElementById(\"keyboard\");\nObject(_messaging_ws__WEBPACK_IMPORTED_MODULE_1__[\"createClient\"])(\"ws://localhost:8080/ws\")\n    .then((client) => {\n    logger.info(\"Connected.\", client);\n    const jsonClient = Object(_messaging_ws__WEBPACK_IMPORTED_MODULE_1__[\"wrapAsJsonClient\"])(client);\n    Object(_audio_keyboard__WEBPACK_IMPORTED_MODULE_3__[\"createKeyboard\"])(keyboardContainer, (midiEvent) => {\n        jsonClient.publish(\"/app/midi/input\", midiEvent);\n    });\n    jsonClient.subscribe(\"/topic/midi/output\", (midiEvent) => {\n        const release = Object(_audio_synth__WEBPACK_IMPORTED_MODULE_2__[\"pressKey\"])(midiEvent);\n        setTimeout(() => release(), 500);\n    });\n})\n    .catch((e) => logger.error(\"Received error.\", e));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi90cy9tYWluLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vdHMvbWFpbi50cz9mYzNiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gXCIuL2xvZ2dlclwiO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50LCB3cmFwQXNKc29uQ2xpZW50IH0gZnJvbSBcIi4vbWVzc2FnaW5nL3dzXCI7XG5pbXBvcnQgdHlwZSB7IE1pZGlFdmVudCB9IGZyb20gXCIuL2F1ZGlvL21pZGlFdmVudFwiO1xuaW1wb3J0IHsgcHJlc3NLZXkgfSBmcm9tIFwiLi9hdWRpby9zeW50aFwiO1xuaW1wb3J0IHsgY3JlYXRlS2V5Ym9hcmQgfSBmcm9tIFwiLi9hdWRpby9rZXlib2FyZFwiO1xuXG5jb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoXCJtYWluXCIpO1xuXG5jb25zdCBrZXlib2FyZENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia2V5Ym9hcmRcIikhO1xuXG5jcmVhdGVDbGllbnQoXCJ3czovL2xvY2FsaG9zdDo4MDgwL3dzXCIpXG4gICAgLnRoZW4oKGNsaWVudCkgPT4ge1xuICAgICAgICBsb2dnZXIuaW5mbyhcIkNvbm5lY3RlZC5cIiwgY2xpZW50KTtcbiAgICAgICAgY29uc3QganNvbkNsaWVudCA9IHdyYXBBc0pzb25DbGllbnQ8TWlkaUV2ZW50PihjbGllbnQpO1xuXG4gICAgICAgIGNyZWF0ZUtleWJvYXJkKGtleWJvYXJkQ29udGFpbmVyLCAobWlkaUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBqc29uQ2xpZW50LnB1Ymxpc2goXCIvYXBwL21pZGkvaW5wdXRcIiwgbWlkaUV2ZW50KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAganNvbkNsaWVudC5zdWJzY3JpYmUoXCIvdG9waWMvbWlkaS9vdXRwdXRcIiwgKG1pZGlFdmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVsZWFzZSA9IHByZXNzS2V5KG1pZGlFdmVudCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlbGVhc2UoKSwgNTAwKTtcbiAgICAgICAgfSk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGUpID0+IGxvZ2dlci5lcnJvcihcIlJlY2VpdmVkIGVycm9yLlwiLCBlKSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/ts/main.ts\n");

/***/ }),

/***/ "./src/main/ts/messaging/ws.ts":
/*!*************************************!*\
  !*** ./src/main/ts/messaging/ws.ts ***!
  \*************************************/
/*! exports provided: createClient, wrapAsJsonClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createClient\", function() { return createClient; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"wrapAsJsonClient\", function() { return wrapAsJsonClient; });\n/* harmony import */ var _stomp_stompjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stomp/stompjs */ \"./node_modules/@stomp/stompjs/bundles/stomp.umd.js\");\n/* harmony import */ var _stomp_stompjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_stomp_stompjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger */ \"./src/main/ts/logger.ts\");\n\n\nconst logger = Object(_logger__WEBPACK_IMPORTED_MODULE_1__[\"getLogger\"])(\"StompClient\");\nconst createClient = (url) => new Promise((resolve, reject) => {\n    const client = new _stomp_stompjs__WEBPACK_IMPORTED_MODULE_0__[\"Client\"]({\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        brokerURL: url,\n        reconnectDelay: 5000,\n        heartbeatIncoming: 4000,\n        heartbeatOutgoing: 4000,\n    });\n    client.onConnect = () => resolve(client);\n    client.onStompError = (frame) => {\n        logger.error(\"Broker reported error: \", frame);\n        reject();\n    };\n    client.activate();\n});\nconst wrapAsJsonClient = (client) => {\n    return {\n        publish: (destination, data) => {\n            logger.debug(`Publishing on '${destination}'.`);\n            client.publish({\n                destination,\n                body: JSON.stringify(data),\n            });\n        },\n        subscribe: (destination, callback) => {\n            logger.debug(`Listening on '${destination}'.`);\n            client.subscribe(destination, (frame) => {\n                logger.debug(`Received event on '${destination}': ${frame.body}.`);\n                callback(JSON.parse(frame.body));\n            });\n        },\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi90cy9tZXNzYWdpbmcvd3MudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi90cy9tZXNzYWdpbmcvd3MudHM/YjExYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnQgfSBmcm9tIFwiQHN0b21wL3N0b21wanNcIjtcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gXCIuLi9sb2dnZXJcIjtcblxuY29uc3QgbG9nZ2VyID0gZ2V0TG9nZ2VyKFwiU3RvbXBDbGllbnRcIik7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDbGllbnQgPSAodXJsOiBzdHJpbmcpOiBQcm9taXNlPENsaWVudD4gPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IG5ldyBDbGllbnQoe1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgICAgICAgICAgYnJva2VyVVJMOiB1cmwsXG4gICAgICAgICAgICByZWNvbm5lY3REZWxheTogNTAwMCxcbiAgICAgICAgICAgIGhlYXJ0YmVhdEluY29taW5nOiA0MDAwLFxuICAgICAgICAgICAgaGVhcnRiZWF0T3V0Z29pbmc6IDQwMDAsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNsaWVudC5vbkNvbm5lY3QgPSAoKSA9PiByZXNvbHZlKGNsaWVudCk7XG5cbiAgICAgICAgY2xpZW50Lm9uU3RvbXBFcnJvciA9IChmcmFtZSkgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiQnJva2VyIHJlcG9ydGVkIGVycm9yOiBcIiwgZnJhbWUpO1xuICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY2xpZW50LmFjdGl2YXRlKCk7XG4gICAgfSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSnNvbkNsaWVudDxUPiB7XG4gICAgcHVibGlzaDogKGRlc3RpbmF0aW9uOiBzdHJpbmcsIGRhdGE6IFQpID0+IHZvaWQ7XG4gICAgc3Vic2NyaWJlOiAoZGVzdGluYXRpb246IHN0cmluZywgY2FsbGJhY2s6IChkYXRhOiBUKSA9PiB2b2lkKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3Qgd3JhcEFzSnNvbkNsaWVudCA9IDxUPihjbGllbnQ6IENsaWVudCk6IEpzb25DbGllbnQ8VD4gPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHB1Ymxpc2g6IChkZXN0aW5hdGlvbjogc3RyaW5nLCBkYXRhOiBUKSA9PiB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoYFB1Ymxpc2hpbmcgb24gJyR7ZGVzdGluYXRpb259Jy5gKTtcbiAgICAgICAgICAgIGNsaWVudC5wdWJsaXNoKHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbixcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzdWJzY3JpYmU6IChkZXN0aW5hdGlvbjogc3RyaW5nLCBjYWxsYmFjazogKGRhdGE6IFQpID0+IHZvaWQpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgTGlzdGVuaW5nIG9uICcke2Rlc3RpbmF0aW9ufScuYCk7XG4gICAgICAgICAgICBjbGllbnQuc3Vic2NyaWJlKGRlc3RpbmF0aW9uLCAoZnJhbWUpID0+IHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoXG4gICAgICAgICAgICAgICAgICAgIGBSZWNlaXZlZCBldmVudCBvbiAnJHtkZXN0aW5hdGlvbn0nOiAke2ZyYW1lLmJvZHl9LmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKEpTT04ucGFyc2UoZnJhbWUuYm9keSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/ts/messaging/ws.ts\n");

/***/ }),

/***/ "./src/main/ts/mode.ts":
/*!*****************************!*\
  !*** ./src/main/ts/mode.ts ***!
  \*****************************/
/*! exports provided: DEVELOPMENT_MODE */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEVELOPMENT_MODE\", function() { return DEVELOPMENT_MODE; });\nconst DEVELOPMENT_MODE = \"development\" === \"development\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi90cy9tb2RlLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vdHMvbW9kZS50cz8xOTRmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBERVZFTE9QTUVOVF9NT0RFID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/ts/mode.ts\n");

/***/ })

/******/ });